{
  "prefix" : ["\\documentclass[12pt]{article}",
	"\\usepackage{minted}",
	"\\usepackage[utf8]{inputenc}",
	"\\usepackage{latexsym,amsfonts,amssymb,amsthm,amsmath,mathtools}",
	"\\usepackage{hyperref}",
	"",
	"",
	"\\setlength{\\parindent}{0in}",
	"\\setlength{\\oddsidemargin}{0in}",
	"\\setlength{\\textwidth}{6.5in}",
	"\\setlength{\\textheight}{8.8in}",
	"\\setlength{\\topmargin}{0in}",
	"\\setlength{\\headheight}{18pt}",
	"\\theoremstyle{definition}",
	"\\newtheorem{problem}{Problem}",
	"\\newtheorem{proposition}{Proposition}",
	"\\newtheorem{theorem}{Theorem}",
	"\\newtheorem{corollary}{Corollary}",
	"\\newtheorem{conjecture}{Conjecture}",
	"\\newtheorem{lemma}{Lemma}",
	"\\newtheorem{example}{Example}",
	"\\newtheorem{remark}{Remark}",
	"\\newtheorem{definition}{Definition}",
	"\\newtheorem*{answer}{Answer}",
	"",
	"",
	"",
	"\\title{YOUR TITLE HERE}",
	"",
	"\\author{YOU NAME HERE}", 
	"",
	"",
	"",
	"\\begin{document}",
	"\\maketitle",
	"\\vspace{0.5in}",
	""],
	
	
	
  "suffix" : [
    "",
    "",
    "",
    "",
	"\\vspace{2in} %Leave more space for comments!",
	"",
	"",
	"",
	"",
	"",
	"\\end{document}",
	""],
	
  "COMMENT on protect_env ##########################################################": [
	"The ranges are used to protect the content from being changed by the regex rules.",
	"To be more exact, this means regex rules will not match the protected content.",
	"However, indent will still be added, and lineBeginning/lineEnd will also be added.",
	"Also, rules with field `overwrite==true` will ignore protection."
  ],

  "protect_env": [
	{
		"range": "\\\\begin\\{minted\\}([\\s\\S]*?)\\\\end\\{minted\\}"
	},
	{
		"range": "\\\\begin\\{equation\\*?\\}([\\s\\S]*?)\\\\end\\{equation\\*?\\}"
	},
	{
		"range": "\\$\\$([\\s\\S]+?)\\$\\$"
	},
	{
		"range": "\\$([\\s\\S]+?)\\$"
	},
	{
		"range": "\\\\begin\\{aligned\\}([\\s\\S]*?)\\\\end\\{aligned\\}"
	},
	{
		"range": "\\\\\\[(\\s\\S*?)\\\\\\]"
	}
  ],

  "COMMENT on regex_rules ##########################################################": [
	"regex rules are used to match the content and replace it with the replacement.",
	"trigger : the regex used to match the content",
	"replacement : the replacement for the matched content.",
		"By default, the content will not be changed. (which makes it's possible to be matched by other rules)",
	"head : the content added before the matched content, in different line",
	"tail : the content added after the matched content and its child blocks, in different line",
	"lineBeginning : the content added before the matched content, in the same line",
	"lineEnd : the content added after the matched content, in the same line"
  ],

  "regex_rules": {

	"special_keyword": [
	  {
		  "trigger": "&",
		  "replacement": "\\&"
	  }
	],

	"markdown_cmd": [
		{
			"trigger": "\\*\\*(.*?)\\*\\*",
			"replacement": "\\textbf{$1}"
		},
		{
			"trigger": "\\*(.*?)\\*",
			"replacement": "\\emph{$1}"
		},
	    {
			"trigger": "^```(.+)([\\s\\S]*)```$",
			"replacement": "\\begin{minted}{$1} $2\\end{minted}"
	    },
		{
			"trigger": "\\`([^`]+?)\\`",
			"replacement": "\\textbf{$1}"
		}
	],

    "section": [
      {
        "trigger": "### Proof",
        "replacement": "",
		"head": "\\begin{proof}",
		"tail": "\\end{proof}",
		"overwrite": true
      },
	  {
        "trigger": "### (.*)",
        "replacement": "\\subsubsection{$1}",
		"overwrite": true
      },
	  {
        "trigger": "## (.*)",
        "replacement": "\\subsection{$1}",
		"overwrite": true
      },
	  {
		"trigger": "# (.*)",
		"replacement": "\\section{$1}",
		"overwrite": true
	  }
    ],
	
	"theorem": [
      {
		"trigger": "^Conjecture\\. ",
		"head": "\\begin{conjecture}",
		"replacement": "",
		"tail": "\\end{conjecture}"
	  },
      {
		"trigger": "^Proposition\\. ",
		"head": "\\begin{proposition}",
		"replacement": "",
		"tail": "\\end{proposition}"
	  },
	  {
		"trigger": "^Theorem\\. ",
		"head": "\\begin{theorem}",
		"replacement": "",
		"tail": "\\end{theorem}"
	  },
	  {
		"trigger": "^Corollary\\. ",
		"head": "\\begin{corollary}",
		"replacement": "",
		"tail": "\\end{corollary}"
	  },
	  {
		"trigger": "^Lemma\\. ",
		"head": "\\begin{lemma}",
		"replacement": "",
		"tail": "\\end{lemma}"
	  },
	  {
		"trigger": "^Example\\. ",
		"head": "\\begin{example}",
		"replacement": "",
		"tail": "\\end{example}"
	  },
	  {
		"trigger": "^Remark\\. ",
		"head": "\\begin{remark}",
		"replacement": "",
		"tail": "\\end{remark}"
	  },
	  {
		"trigger": "^Definition\\. ",
		"head": "\\begin{definition}",
		"replacement": "",
		"tail": "\\end{definition}"
	  }
	],

	"logseq_cmd": [
	  {
		"trigger": "\\[\\[(.+?)\\]\\]",
		"replacement": "\\textbf{$1}",
		"comment": "For logseq page link."
	  },
	  {
		"trigger": "\\[(.+?)\\]\\(\\(\\((.+?)\\)\\)\\)",
		"replacement": "\\textbf{$1}",
		"comment": "For markdown hyperlink of logseq blocks. Only the title would be kept."
	  },
	  {
		"trigger": "\\(\\((.+?)\\)\\)",
		"replacement": "\\textbf{$1}",
		"comment": "For logseq block link."
	  },
	  {
		"trigger": "\\[(.*?)\\]\\((.+?)\\)",
		"replacement": "\\href{$2}{$1}",
		"comment": "For markdown hyperlink."
	  },
	  {
		"trigger": "#\\+[A-Za-z0-9-_]+",
		"replacement": "",
		"comment": "Delete logseq tags."
	  },
	  {
		"trigger": "collapsed:: [A-Za-z0-9-_]+",
		"replacement": ""
	  },
	  {
		"trigger": "id:: [0-9a-f-_]+",
		"replacement": ""
	  },
	  {
		"trigger": "background-color:: (.+)",
		"lineBeginning": "\\textcolor{$1}{",
		"replacement": "",
		"lineEnd": "}"
	  }
	]
  },

  "number_list_rules": {
    "number_list": [
      {
        "trigger": "logseq\\.order-list-type:: number",
		"replacement": "",
		"head": "\\begin{enumerate}",
		"lineBeginning": "\\item ",
		"tail": "\\end{enumerate}",
		"overwrite": true,
		"comment": "Convert logseq order-list of type number into latex enumerate."
      }
    ]
  },
  
  "no_indent_env" : [
	{
		"start": "\\\\begin\\{minted\\}",
		"end": "\\\\end\\{minted\\}",
		"comment": "no_indent_env is used to prevent adding indentation to certain environments, e.g. \\begin{minted}{cpp} and \\end{minted}."
	}
  ],
  
  "no_par_env" : [
	{
		"start": "\\\\begin\\{minted\\}",
		"end": "\\\\end\\{minted\\}"
	},
	{
		"start": "\\\\begin\\{enumerate\\}",
		"end": "\\\\end\\{enumerate\\}"
	},
	{
		"start": "\\\\begin\\{itemize\\}",
		"end": "\\\\end\\{itemize\\}"
	}
  ]
}